---------------------------------------------------------------------
    ##### Backup Code #####
  ---------------------------------------------------------------------
    output$scatter <- renderPlotly({
      
      xInput <- input$x
      yInput <- input$y
      
      
      p <- ggplot(data = dataSample(), aes_string(x = xInput , y = yInput, col = "Diagnosis")) + 
        geom_point() +
        geom_smooth() +
        #geom_line(size = 0.5) +
        #geom_hline(aes(yintercept = as.numeric(x)), linetype = 'dashed', color = 'red')+
        #geom_vline(aes(xintercept = as.numeric(y)), linetype = 'dashed', color = 'red')+
        labs(title = paste(xInput, "and", yInput),
             x = xInput, y = yInput)+
        theme_gdocs()
      
      ggplotly(p)
      
      print(p)
      
    })
  
  output$histogram <- renderPlotly({
    
    #sampleCancer$Diagnosis <- as.numeric(as.character(sampleCancer$Diagnosis))
    
    #corrplot(cor(sampleCancer), order = "hclust")
    
    p <- ggplot(sampleCancer, aes_string(x = input$x)) +
      geom_histogram(fill = "#69b3a2")
    
    ggplotly(p)
    
    print(p)
    
  })
  
  output$bar <- renderPlotly({
    #p <- ggplot(sampleCancer, aes_string(x = input$x, y = "Diagnosis", col = "Diagnosis")) +
    #geom_bar(stat = "identity", width = 0.5, aes_string(fill = "Diagnosis")) +
    #coord_flip()
    
    ggplot(sampleCancer, aes_string(x = input$x, fill = "Diagnosis")) +
      geom_bar(stat = "count", position = "stack", show.legend = TRUE)
  })
  
  output$lollipop <- renderPlotly({
    
    ggplot(sampleCancer, aes_string(x = input$x, y = input$y, col = "Diagnosis")) +
      geom_point() +
      geom_segment(aes_string(x = input$x, xend = input$x, y =0, yend = input$y)) +
      coord_flip()
    
    
  })
  
  
  
  
  output$boxplot <- renderPlotly({
    #p <- ggplot(cancerDataset, aes_string(x = "Diagnosis", y = "Texture_Mean", color = "Texture_Mean")) +
    #geom_boxplot() +
    #geom_jitter() +
    #ggtitle("Diagnosis based on Texture_Mean")
    
    #ggplotly(p)
    #print(p)
    
    cancerDataset1 <- melt(cancerDataset[2:32], id = "Diagnosis")
    
    ggplot(cancerDataset1, aes(x = variable, y = value, color = Diagnosis)) +
      #geom_jitter(aes(color = Diagnosis)) +
      geom_boxplot()
    
    
    
    
    
  })
  
  #output$summary <- renderText(      summary(sampleCancer))
  
  
      # ggcorr(cancerDataset[, 2:13],
    # method = c("everything", "pearson"),
    # geom = "text",
    # nbreak = 5,
    # palette = "RdYlBu",
    # size = 5,
    # hjust = 1,
    # layout.exp = 1,
    # label = TRUE,
    # label_alpha = 0.5)
    
    # define the grid: 1 row 3 columns
    #par(mfrow = c(1,3))
    
    # plot graph for columns 2 to 11
    # p1 <- corrplot(cor(cancerDataset[, c(2:12)]),
    #                method = "circle",
    #                order = "hclust",
    #                type = "lower",
    #                diag = FALSE,
    #                tl.col = "black",
    #                addCoef.col = "pink",
    #                number.cex = 0.9,
    #                bg = "white",
    #                title = "Correlation between Variables",
    #                mar = c(0, 0, 5, 0)
    # )